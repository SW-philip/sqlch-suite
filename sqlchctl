#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/sqlch"
STATION_FILE="$CONFIG_DIR/stations"
LAST_PLAYED="$CONFIG_DIR/last"
SOCKET="/tmp/mpvsocket"

mkdir -p "$CONFIG_DIR"
touch "$STATION_FILE" "$LAST_PLAYED"

play() {
  if [[ -z "${1:-}" ]]; then
    echo "No station name or URL provided." >&2
    exit 1
  fi

  local input="$1"
  local url name

  echo "[DEBUG] Input received: $input" >&2

  # Safe lookup loop to support spaces
  while IFS='=' read -r name url; do
    if [[ "$name" == "$input" ]]; then
      break
    fi
  done < "$STATION_FILE"

  if [[ -z "$url" ]]; then
    # Fallback: assume it's a raw URL
    url="$input"
    name="$input"
  fi

  if [[ -z "$url" ]]; then
    notify-send "sqlch Error" "Station '$input' not found."
    echo "❌ Could not resolve: $input" >&2
    exit 1
  fi

  if [[ -S "$SOCKET" ]]; then
    echo "quit" | socat - "$SOCKET" 2>/dev/null || true
    rm -f "$SOCKET"
    sleep 0.5
  fi

  echo "$name" > "$LAST_PLAYED"
  notify-send "🎶 Now Playing" "$name"
  echo "[DEBUG] Playing station: $url" >&2

  mpv --no-video --input-ipc-server="$SOCKET" --ao=pulse "$url" > /dev/null 2>&1 &
}


stop() {
  if [[ -S "$SOCKET" ]]; then
    echo "quit" | socat - "$SOCKET" 2>/dev/null || true
    rm -f "$SOCKET"
    notify-send "⛔ Stopped" "Playback stopped."
  else
    echo "No stream is currently active."
  fi
}

status() {
  if [[ -S "$SOCKET" ]]; then
    local name
    name=$(<"$LAST_PLAYED")
    echo "Now playing: $name"
  else
    echo "sqlch: Not Playing"
  fi
}

case "${1:-}" in
  play) play "${2:-}" ;;
  stop) stop ;;
  status) status ;;
  *) echo "Usage: sqlchctl {play <name>|stop|status}" ;;
esac
